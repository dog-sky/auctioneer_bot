require('dotenv').config()
const axios  = require('axios');
const Telegraf = require('telegraf');
const Markup = require('telegraf/markup')
const Extra = require('telegraf/extra')
const SERVER_LIST = require('./store/serverList')
const HELPER = require('./helper/index')
const bot = new Telegraf(process.env.API_KEY_BOT)
const apiUrl = process.env.API_URL
const apiMedia = process.env.API_MEDIA

let userServer = null

// bot.start('commandLine', ({ reply }) =>
//     reply('–ü–∞–Ω–µ–ª—å –∫–æ–º–∞–Ω–¥', Markup
//         .keyboard(['/auction'])
//         .oneTime()
//         .resize()
//         .extra()
//     )
// )

bot.start(ctx => ctx.reply(
    '–£—Å—Ç–∞–Ω–æ–≤–∏ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞, –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π / auction',
    Markup.keyboard(SERVER_LIST.serverList, { columns: 2 }).oneTime().resize().extra()
    )
)

bot.command('setServer', ({ reply }) =>
    reply(
        '–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤',
        Markup.keyboard(SERVER_LIST.serverList, { columns: 2 }).oneTime().resize().extra()
    )
)

bot.command('auction',  (line) => {
    const infoText = userServer ? '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞' : '–í—ã–±–∏—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /setServer'
    line.replyWithMarkdown(infoText);
    bot.on("text", async (ctx) => {
        const hasServerMess = SERVER_LIST.serverList.includes(ctx.message.text)
        SERVER_LIST.serverList.map(server => {
            if (hasServerMess) {
                userServer = ctx.message.text
                if (server === ctx.message.text) {
                    ctx.reply(`–°–µ—Ä–≤–µ—Ä ${ctx.message.text} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç —á–µ—Ä–µ–∑ /auction`)
                }
            }
        })
        if (userServer && !hasServerMess) {
            try {
                ctx.replyWithMarkdown("‚åõÔ∏è –ù—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å");
                const userText = ctx.message.text
                const url = `${apiUrl}?item_name=${encodeURI(userText)}&region=eu&realm_name=${encodeURI(userServer)}`

                const data = await getAucData(url)
                const itemList = data.data.result.map(item => item.item_name)
                const itemListLocal = itemList.map(item => item.ru_RU)
                const uniqItem = [...new Set(itemListLocal)]

                const specificItem = data.data.result.filter(product => {
                    return product.item_name.ru_RU.toUpperCase() === userText.toUpperCase()
                })
                if (specificItem.length > 0) {
                    const qlobalQty = specificItem.length
                    const itemId = specificItem[0].item.id
                    const maxPrice = HELPER.goldFormat(specificItem[0].unit_price)
                    const minPrice = HELPER.goldFormat(specificItem.pop().unit_price)
                    const itemQuality = HELPER.getItemRank(specificItem[0].quality)
                    const setItemQuality = itemQuality ? itemQuality : ''

                    const mediaUrl = `${apiMedia}/${itemId}`
                    const mediaData = await getAucData(mediaUrl)

                    if (mediaData) {
                        ctx.replyWithPhoto(mediaData.data.assets[0].value)
                    }

                    ctx.reply(`${setItemQuality} –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ - ${qlobalQty} –ª–æ—Ç${HELPER.plural(qlobalQty, ['', '–∞', '–æ–≤'])}`).then(res => {
                        ctx.reply(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${minPrice.gold}üü°  ${minPrice.silver}‚ö™Ô∏è  ${minPrice.copper}üü§`)
                        ctx.reply(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${maxPrice.gold}üü°  ${maxPrice.silver}‚ö™Ô∏è  ${maxPrice.copper}üü§`)
                    })
                } else {
                    ctx.reply(`–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å.`)
                    if (uniqItem.length > 1) {
                        // <!-- TODO: —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–∫–∞–º–∏ -->
                        // return ctx.reply('–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏', Extra.HTML().markup((m) =>
                        //     m.inlineKeyboard([
                        //         uniqItem.map(item => {
                        //            return m.callbackButton(item, item)
                        //         })
                        //     ], {parse_mode: 'Markdown'})))
                        ctx.reply(`–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏: ${uniqItem.join(', ')}`)
                    } else {
                        ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É ${userText}`)
                    }
                }
            } catch (e) {
                ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞')
            }
        } else if(!hasServerMess) {
            ctx.reply("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /setServer")
        }
    });
})

const getAucData = async (url) => {
    try {
        const data = await axios.get(url).catch(() => [])
        return data
    } catch (e) {
        throw e;
    }
}

bot.launch(
    ctx => ctx.reply(
        `
        –ü—Ä–∏–≤–µ—Ç ${ctx.from.first_name}!

        –Ø –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –∞—É–∫—Ü–∏–æ–Ω–∞ WoW
        –Ø –º–æ–≥—É:
            –ò—Å–∫–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ World Of Warcraft
            –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Ö —Ç–µ–∫—É—â—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É

        –í –±—É–¥—É—â–µ–º —Å–º–æ–≥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
        `
    )
)
